#!/bin/sh

set -e
set -u
set -x

CONFIG_FILE=/var/lib/gdm3/tails.network
NET_MODULES_BLACKLIST=/etc/modprobe.d/all-net-blacklist.conf

# Import the TAILS_NETCONF variable
. "$CONFIG_FILE"

systemctl start tails-unblock-network.service

# Without this, network is sometimes not unblocked, probably due to some
# race condition between tails-unblock-network.service (that deletes the
# blacklist file) and udevadm trigger.
# This might have been caused by an aufs weirdness (#9012),
# but this code is rather simple and it does not hurt to ensure
# our assumptions are verified.
if [ "${TAILS_NETCONF}" != "disabled" ]; then
   echo "Waiting for ${NET_MODULES_BLACKLIST} to be gone..." >&2
   while [ -e "${NET_MODULES_BLACKLIST}" ]; do
      sleep 0.5
   done
   echo "${NET_MODULES_BLACKLIST} is gone." >&2
fi

# XXX: add debugging information for #9012 to the Journal
ls /etc/modprobe.d
/sbin/lsmod
ls -l /sys/class/net

# There's a chance that udev won't pick up quickly and automatically
# changes to /etc/modprobe.d, for example if it monitors that
# directory via its inode number at the time udev started: the inode
# number of that directory might have changed since (this is
# a documented possibility without overlayfs xino= mount option;
# for details, see #17258).
# So let's instruct udev to update its knowledge of the world.
echo "Asking systemd-udevd to reload databases..." >&2
udevadm control --reload
echo "systemd-udevd has reloaded its databases." >&2

# Now we'll load any present network device previously blocked by
# the blacklist. In particular, the MAC spoofing udev rule should trigger
# for each network device added.
echo "Restarting systemd-udev-trigger.service..." >&2
systemctl restart systemd-udev-trigger.service
echo "systemd-udev-trigger.service restarted." >&2

# Block until all triggers have been run. NetworkManager is started immediately
# after, and without the blocking behaviour there's a race between NM
# and the MAC spoof udev triggers. When NM takes control of some network device,
# some operations are not possible on the device, like MAC spoofing. Hence,
# if NM wins, the udev-triggered run of tails-spoof-mac will fail.
echo "Restarting systemd-udev-settle.service..." >&2
systemctl restart systemd-udev-settle.service
echo "systemd-udev-settle.service restarted." >&2

# XXX: add debugging information for #9012 to the Journal
/sbin/lsmod
ls -l /sys/class/net

# Enable and start NetworkManager services
# No need to manually enable NetworkManager-dispatcher.service,
# as NetworkManager.service has "Also=NetworkManager-dispatcher.service"
# in its [Install] section.
# If tails-spoof-mac goes into panic mode but fails to disable the
# problematic device, the NetworkManager services will be masked.
systemctl enable NetworkManager.service NetworkManager-wait-online.service || :
systemctl start NetworkManager.service NetworkManager-dispatcher.service || :
systemctl --no-block start NetworkManager-wait-online.service || :
